name: Deploy to EC2

on:
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.7
        uses: actions/setup-python@v3
        with:
          python-version: 3.7

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Test with pytest
        run: |
          python main.py

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up SSH connection
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.FAST_API_SSH_KEY }}

      - name: Deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.FAST_API_SECRET_NAME }}@${{ secrets.FAST_API_SECRET_HOST }} << 'EOF'
            cd /home/ec2-user/fast-api
            # git init
            # git remote add origin https://github.com/Yosigoon/fast-api.git
            git pull origin master    # 최신 코드 가져오기
          
            python3 -m pip install --upgrade pip
            if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
            
            # uvicorn으로 실행된 애플리케이션의 프로세스 ID 찾기
            PID=$(pgrep -f "uvicorn main:app")
            
            # 프로세스 ID가 존재하면 해당 프로세스 종료
            if [ ! -z "$PID" ]; then
              sudo kill $PID
              sleep 5 # 프로세스 종료를 위해 충분한 시간 기다림
            fi
            
            # uvicorn 서버 재시작
            nohup python3 -m uvicorn main:app > /home/ec2-user/fast-api/log/fastapi.log 2>&1 &
 
          EOF

  action-slack:
    needs: deploy
    runs-on: code-linux
    steps:
      - uses: 8398a7/action-slack@v3
        with:
          status: custom
          fields: workflow,job,commit,repo,ref,author
          mention: here
          if_mention: failure,cancelled
          custom_payload: |
            {
              attachments: [{
                color: '${{ job.status }}' === 'success' ? 'good' : '${{ job.status }}' === 'failure' ? 'danger' : 'warning',
                text: `${process.env.AS_WORKFLOW}(${process.env.AS_COMMIT})\n${process.env.AS_REPO}@${process.env.AS_REF} by ${process.env.AS_AUTHOR} ${{ job.status }}`,
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always() # Pick up events even if the job fails or is canceled.